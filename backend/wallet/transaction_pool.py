class TransactionPool:
    def __init__(self):
        self.transaction_map = {}

    def clear_transactions(self, blockchain):
        """
        Delete blockchain recorded transactions from pool.
        """
        for block in blockchain.chain:
            for tr in block.data:
                try:
                    del self.transaction_map[tr['id']]
                except KeyError:
                    pass

    def set_transaction(self, transaction):
        """
        Set a transaction in the transaction pool.
        """
        print(transaction)
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address):
        """
        Find a transaction generated by the address in the transaction pool.
        """
        for tr in self.transaction_map.values():
            if tr.input['address'] == address:
                return tr

    def transaction_data(self):
        """
        Return the transactions of the transaction pool, represented in their
        JSON serialized form.
        """
        return list(map(
            lambda tr: tr.to_json(), self.transaction_map.values()
        ))
